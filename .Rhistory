library(circlize)
library(treemap)
df <- read.csv("./datasets/pokemon-cleaned.csv") ## %>%
# rename(
#     Name = Name,
#     Total = Total,
#     HP = HP,
#     Attack = Attack,
#     Defense = Defense,
#     SpecialAttack = Special.Attack,
#     SpecialDefense = Special.Defense,
#     Speed = Speed,
#     PrimaryType = primary_type,
#     SecondaryType = secondary_type
#   ) %>%
#   mutate(
#     SecondaryType = replace_na(SecondaryType, "None")
#   )
# Chunk 2
# UF = c('AC', 'AM', 'AP', 'BA', 'CE', 'ES', 'PB', 'PE')
# Column = c(30, 200, 7, 12, 854, 2, 78, 965)
# df <- data.frame(UF,Column)
# Chunk 3
# selectInput(inputId = "states",
#             label="Select State:",
#             choices = unique(df$UF),
#             selected = "",
#             multiple=FALSE
#             )
# Chunk 4
# renderValueBox({
# b <- df %>%
#   filter(UF %in% input$states) %>%
#   select(Column)
#
# valueBox(value = b, icon = "fa-users")
# })
# Chunk 5
selectInput(inputId = "pokemons",
label="Selecione os pokemons:",
choices = unique(df$Name),
selected = "",
multiple = FALSE
)
# Chunk 6
renderPlot({
valor <- df %>%
filter(Name %in% input$pokemons) %>%
select(-c(X, X., HP, primary_type, secondary_type, Total))
ggradar(valor,
legend.position = "bottom")
})
# Chunk 7
# V1 <- c(rep("F",4),rep("M",5),"F","M")
# V2 <- c('I','I','B','I','B','R','B','R','B','I','R')
#
# m <- data.frame(table(V1,V2))
type_combinations <- df %>%
na.omit(secondary_type) %>%
group_by(primary_type, secondary_type) %>%
summarise(Frequency = n(), .groups = "drop") %>%
arrange(desc(Frequency))
# View(type_combinations)
# par(cex=3,mar=c(0,0,0,0))
chordDiagram(type_combinations[1:5, ],col=rainbow(6),
annotationTrackHeight = mm_h(c(3, 3)),
annotationTrack = c("name", "grid"),
grid.border = "black",
diffHeight = mm_h(5))
## Ataque vs Defesa por tipo de pokemon
ggplot(pokemon_data, aes(x = Attack, y = Defense, size = Speed, color = PrimaryType)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa com Velocidade como Tamanho",
x = "Ataque",
y = "Defesa",
size = "Velocidade"
) +
theme_minimal()
## Mapa de arvore
treemap_data <- df %>%
na.omit(secondary_type) %>%
group_by(primary_type, secondary_type) %>%
summarise(Frequency = n()) %>%
ungroup()
# Criar o treemap
treemap(
treemap_data,
index = c("primary_type", "secondary_type"),
vSize = "Frequency",
title = "Treemap das Combinações de Tipos"
)
df <- read.csv("./datasets/pokemon-cleaned.csv") ## %>%
check_value <- df %>%
filter(Name %in% input$tipo_pokemon) %>%
select(Attack, Defence, primary_type)
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(ggradar)
library(circlize)
library(treemap)
df <- read.csv("./datasets/pokemon-cleaned.csv") ## %>%
check_value <- df %>%
filter(Name %in% input$tipo_pokemon) %>%
select(Attack, Defence, primary_type)
checkboxGroupInput("tipo_pokemon",
"Selecione o tipo",
choices = (unique(df$primary_type)),
selected = df$primary_type[1:2])
---
title: "Untitled"
checkboxGroupInput(inputId = "tipo_pokemon",
label = "Selecione o tipo",
choices = (unique(df$primary_type)),
selected = df$primary_type[1:2])
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(ggradar)
library(circlize)
library(treemap)
df <- read.csv("./datasets/pokemon-cleaned.csv") ## %>%
ggplot(df[1:2], aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa com Velocidade como Tamanho",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
View(df)
vetor_teste <- df[1:2]
vetor_teste <- df[1:2,]
df[1:2,]
df <- read.csv("./datasets/pokemon-cleaned.csv") ## %>%
vetor_teste <- df[1:2,]
View(vetor_teste)
vetor_teste <- df[1:2,]
teste <- df %>%
filter(primary_type %in% vetor_teste) %>%
select(-c(X, X., HP, primary_type, secondary_type, Total))
library(dplyr)
library(tidyr)
library(ggplot2)
vetor_teste <- df[1:2,]
teste <- df %>%
filter(primary_type %in% vetor_teste) %>%
select(-c(X, X., HP, primary_type, secondary_type, Total))
teste
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type) %>%
select(-c(X, X., HP, primary_type, secondary_type, Total))
teste
ggplot(teste, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa com Velocidade como Tamanho",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type)
ggplot(teste, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa com Velocidade como Tamanho",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
View(teste)
View(df)
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(ggradar)
library(circlize)
library(treemap)
df <- read.csv("./datasets/pokemon-cleaned.csv") ## %>%
df <- read.csv("./datasets/pokemon-cleaned.csv")
vetor_teste <- df[1:2,]
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type)
library(dplyr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(tidyr)
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type)
ggplot(teste, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa com Velocidade como Tamanho",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
vetor_teste <- df[1:3,]
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type) %>%
ggplot(teste, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa com Velocidade como Tamanho",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
vetor_teste <- df[1:3,]
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type)
ggplot(teste, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa com Velocidade como Tamanho",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
vetor_teste <- df[1:3]
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type)
View(vetor_teste)
vetor_teste <- df[1:3, ]
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type)
View(vetor_teste)
ggplot(teste, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa com Velocidade como Tamanho",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type)
ggplot(teste, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa por tipo",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type)
ggplot(teste[2:3], aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa por tipo",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type)
ggplot(teste[1:3, ], aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa por tipo",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
teste <- df %>%
filter(primary_type %in% vetor_teste$primary_type)
ggplot(teste[1:2, ], aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa por tipo",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
ggplot(df, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa por tipo",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
teste <- df %>%
na.omit(primary_type) %>%
filter(primary_type %in% vetor_teste$primary_type)
ggplot(df, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
title = "Ataque vs Defesa por tipo",
x = "Ataque",
y = "Defesa"
) +
theme_minimal()
teste <- df %>%
na.omit(primary_type) %>%
# filter(primary_type %in% vetor_teste$primary_type)
filter(primary_type %in% c("DARK", "DRAGON"))
View(teste)
ggplot(teste, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
x = "Ataque",
y = "Defesa",
) +
theme_minimal()
teste <- df %>%
na.omit(primary_type) %>%
# filter(primary_type %in% vetor_teste$primary_type)
filter(primary_type %in% c("DARK", "DRAGON", "GRASS"))
ggplot(teste, aes(x = Attack, y = Defense, color = primary_type)) +
geom_point(alpha = 0.7) +
scale_size(range = c(2, 10)) +
labs(
x = "Ataque",
y = "Defesa",
) +
theme_minimal()
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(ggradar)
pokemon_data <- read_xlsx("./datasets/pokemon.xlsx")
gc()
pokemon_data <- read.csv("./datasets/pokemon-cleaned.csv")
top_10_strongest <- pokemon_data %>%
group_by(PrimaryType) %>%
arrange(desc(Total)) %>%
slice_head(n = 10) %>%
ungroup()
top_10_strongest <- pokemon_data %>%
group_by(primary_type) %>%
arrange(desc(Total)) %>%
slice_head(n = 10) %>%
ungroup()
ggplot(top_10_strongest, aes(x = reorder(Name, -Total), y = Total, fill = PrimaryType)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ PrimaryType, scales = "free_y") +
labs(
title = "Top 10 Pokémon Mais Fortes por Tipo",
x = "Nome do Pokémon",
y = "Total de Atributos",
fill = "Tipo Principal"
) +
theme_minimal()
ggplot(top_10_strongest, aes(x = reorder(Name, -Total), y = Total, fill = primary_type)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ primary_type, scales = "free_y") +
labs(
title = "Top 10 Pokémon Mais Fortes por Tipo",
x = "Nome do Pokémon",
y = "Total de Atributos",
fill = "Tipo Principal"
) +
theme_minimal()
# Criar o treemap
treemap(treemap_data)
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(ggradar)
library(circlize)
library(treemap)
treemap_data <- df %>%
na.omit(secondary_type) %>%
group_by(primary_type, secondary_type) %>%
summarise(Frequency = n()) %>%
ungroup()
df <- read.csv("./datasets/pokemon-cleaned.csv")
treemap_data <- df %>%
na.omit(secondary_type) %>%
group_by(primary_type, secondary_type) %>%
summarise(Frequency = n()) %>%
ungroup()
# Criar o treemap
treemap(treemap_data)
treemap_data <- df %>%
na.omit(secondary_type) %>%
group_by(primary_type, secondary_type) %>%
summarise(Frequency = n()) %>%
ungroup()
# Criar o treemap
treemap(treemap_data)
treemap(treemap_data,
index = primary_type)
treemap(treemap_data,
index = c("primary_type"))
treemap(treemap_data,
index = c("primary_type"),
vSize = "Frequency")
rate <- computeContactRate()
pokemon_data <- read.csv("./datasets/pokemon-cleaned.csv")
strongest <- pokemon_data %>%
group_by(primary_type) %>%
summarise(media_total = mean(Total))
library(dplyr)
library(tidyr)
library(tidyr)
library(dplyr)
library(ggplot2)
strongest <- pokemon_data %>%
group_by(primary_type) %>%
summarise(media_total = mean(Total))
View(strongest)
View(strongest)
ggplot(strongest, aes(x = primary_type, y = Total)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ primary_type, scales = "free_y") +
labs(
x = "Tipo Pokemon",
y = "Total de Atributos"
) +
theme_minimal()
ggplot(strongest, aes(x = primary_type, y = media_total)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ primary_type, scales = "free_y") +
labs(
x = "Tipo Pokemon",
y = "Total de Atributos"
) +
theme_minimal()
ggplot(strongest, aes(x = as.factor(primary_type), y = media_total)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ primary_type, scales = "free_y") +
labs(
x = "Tipo Pokemon",
y = "Total de Atributos"
) +
theme_minimal()
ggplot(strongest, aes(x = as.factor(primary_type), y = media_total)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
x = "Tipo Pokemon",
y = "Total de Atributos"
) +
theme_minimal()
ggplot(strongest, aes(x = as.factor(primary_type), y = media_total)) +
geom_bar(stat = "identity") +
labs(
x = "Tipo Pokemon",
y = "Total de Atributos"
) +
theme_minimal()
ggplot(strongest, aes(x = primary_type, y = media_total)) +
geom_bar(stat = "identity") +
labs(
x = "Tipo Pokemon",
y = "Total de Atributos"
) +
theme_minimal()
df <- read.csv("./datasets/pokemon-cleaned.csv")
View(df)
df <- read.csv("./datasets/pokemon-cleaned.csv")
library(dplyr)
library(tidyr)
vetor_1 <- df[1]
View(vetor_1)
vetor_1 <- df[,1]
vetor_1 <- df[,1]
vetor_1 <- df[1:3, ]
View(vetor_1)
vetor_1 <- df[1:1, ]
View(vetor_1)
gauge(vetor_1$Special.Attack, min = 0, max = 300, gaugeSectors(
success = c(200, 300), warning = c(100, 199), danger = c(0, 99)
))
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(ggradar)
library(circlize)
library(treemap)
gauge(vetor_1$Special.Attack, min = 0, max = 300, gaugeSectors(
success = c(200, 300), warning = c(100, 199), danger = c(0, 99)
))
library(fmsb)
